#!/usr/bin/env python3
from paramiko import AuthenticationException
import paramiko
from nrc import argumentToVariable
import sys

reset = '\033[0m'
purple = '\033[35m'
light_blue = '\033[36m'
green = '\033[1;32m'


def clear_two_lines_up():
  print('\033[1A\033[2K\033[1A\033[2K', end='', flush=True)


def clear_one_line_up():
  print('\033[1A\033[2K', end='', flush=True)


def timer(t):
  import datetime
  import re
  try:
    year = re.search('(\d)+ year(s)?', t).group()
    year = int(year.strip('s').strip('year').strip())
  except AttributeError:
    year = 0
  try:
    week = re.search('(\d)+ week(s)?', t).group()
    week = int(week.strip('s').strip('week').strip())
  except AttributeError:
    week = 0
  try:
    day = re.search('(\d)+ day(s)?', t).group()
    day = int(day.strip('s').strip('day').strip())
  except AttributeError:
    day = 0
  day += year * 365
  try:
    hour = re.search('(\d)+ hour(s)?', t).group()
    hour = int(hour.strip('s').strip('hour').strip())
  except AttributeError:
    hour = 0
  try:
    minute = re.search('(\d)+ minute(s)?', t).group()
    minute = int(minute.strip('s').strip('minute').strip())
  except AttributeError:
    minute = 0

  time_since_restart = datetime.timedelta(weeks=week, days=day, hours=hour, minutes=minute)
  today = datetime.datetime.today()
  restart_date = today - time_since_restart
  return time_since_restart.days, restart_date.ctime()


def connection(switch_ip):
  from auth import SSH
  import time
  ssh = paramiko.SSHClient()
  ssh.load_system_host_keys()
  ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  print(f'Attempting connection to {switch_ip}')
  ssh.connect(switch_ip, username=SSH.username, password=SSH.password, look_for_keys=False, allow_agent=False)
  clear_one_line_up()
  print('Connection successful!\nNow grabbing uptime')
  ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command('sh ver | i uptime')
  time.sleep(3)
  output = ssh_stdout.readline().strip()
  clear_two_lines_up()
  print('Got the uptime!\nNow closeing the connection')
  ssh.close()
  clear_two_lines_up()
  print('Connection successfully closed!')
  clear_one_line_up()
  return output


# uptime = input("Copy and paste the uptime into here to see when the switch was restarted last\n>> ")
# clear_two_lines_up()
# uptime = 'uptime is 1 week, 3 days, 7 hours, 16 minutes'  # DEBUG
# uptime = 'uptime is 2 years, 5 days, 2 hours, 24 minutes'  # DEBUG
# ip = '172.31.16.52'  # DEBUG
# ip = input('Whats the switch IP?>> ')
ip = argumentToVariable(1, prompt_text='Switch IP: ')
clear_one_line_up()
try:
  uptime = connection(ip)
except TimeoutError:
  print('I\'m sorry but it looks like I timed out')
  sys.exit()
except AuthenticationException as auth_error:
  sys.exit(f"Authentification Error\n{auth_error = }")
# print(f'{uptime = }')  # DEBUG


days, date = timer(uptime)
print(f'{light_blue}The switch {purple}[{reset}{green}{ip}{reset}{purple}]{reset} {light_blue}has '
      f'been up for{reset} {purple}[{reset}{green}{days}{reset}{purple}]{reset} '
      f'{light_blue}days which means the date it was '
      f'restarted was{reset} {purple}[{reset}{green}{date}{reset}{purple}]{reset} ')

